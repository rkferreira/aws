AWSTemplateFormatVersion: '2010-09-09'

Description: 'Test Env - Api Gateway VPC Link'

Parameters:

 RestApiStackName:
   Description: StackName for importing load balancer endpoint
   Type: String
   Default: "test-beanstalk-restdataapi"

 NetworkStackName:
   Description: StackName for network import values
   Type: String
   Default: "test-networkstack"

 SecurityGroupsStackName:
   Description: StackName for security groups import values
   Type: String
   Default: "test-securitygroups"


Resources:

 LambdaLbDnsResolver:
   Type: AWS::Lambda::Function
   Properties:
     Code:
       ZipFile: |
         import json
         import socket
         import cfnresponse
         def lambda_handler(event, context):
           hostname = event['ResourceProperties']['elbhostname']
           ipAddress1 = None
           ipAddress2 = None
           responseData = {}
           while ipAddress1 == ipAddress2:
             ipAddress1   = socket.gethostbyname(hostname)
             ipAddress2   = socket.gethostbyname(hostname)
           responseData['ipAddress1'] = ipAddress1
           responseData['ipAddress2'] = ipAddress2
           cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
     Handler: index.lambda_handler
     Runtime: python2.7
     Timeout: 20
     Role: !GetAtt "LambdaExecutionRole.Arn"
   DependsOn: LambdaExecutionRole

 LambdaExecutionRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Principal:
             Service:
               - lambda.amazonaws.com
           Action:
             - sts:AssumeRole
     Path: "/"
     Policies:
       - PolicyName: policy-lambdalbdnsresolver
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
           - Effect: Allow
             Action:
               - logs:CreateLogGroup
               - logs:CreateLogStream
               - logs:PutLogEvents
             Resource: arn:aws:logs:*:*:*

 CustomLbIps:
   Type: AWS::CloudFormation::CustomResource
   Properties:
     ServiceToken: !GetAtt "LambdaLbDnsResolver.Arn"
     elbhostname:
       Fn::ImportValue:
         !Sub "${RestApiStackName}-RESTDATAAPIENDPOINT"
   DependsOn: LambdaLbDnsResolver

 VpcLinkNetLb:
   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
   Properties:
     IpAddressType: ipv4
     Scheme: internal
     Type: network
     Name: test-env-vpclink-netlb
     Subnets:
       -
         Fn::ImportValue:
           !Sub "${NetworkStackName}-LBPRIVATESUBNET1"
       -
         Fn::ImportValue:
           !Sub "${NetworkStackName}-LBPRIVATESUBNET2"
     LoadBalancerAttributes:
       - Key: load_balancing.cross_zone.enabled
         Value: true

 VpcLinkNetLbTgtGroup80:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties:
     Name: test-env-vpclinkgrp80
     Port: 80
     Protocol: TCP
     TargetType: ip
     VpcId:
       Fn::ImportValue:
         !Sub "${NetworkStackName}-VPCID"
     Targets:
       - Id: !GetAtt "CustomLbIps.ipAddress1"
         Port: 80
       - Id: !GetAtt "CustomLbIps.ipAddress2"
         Port: 80
   DependsOn: CustomLbIps

 VpcLinkNetLbTgtGroup443:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties:
     Name: test-env-vpclinkgrp443
     Port: 443
     Protocol: TCP
     TargetType: ip
     VpcId:
       Fn::ImportValue:
         !Sub "${NetworkStackName}-VPCID"
     Targets:
       - Id: !GetAtt "CustomLbIps.ipAddress1"
         Port: 443
       - Id: !GetAtt "CustomLbIps.ipAddress2"
         Port: 443
   DependsOn: CustomLbIps

 VpcLinkNetLbListener80:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref "VpcLinkNetLbTgtGroup80"
     LoadBalancerArn: !Ref "VpcLinkNetLb"
     Port: 80
     Protocol: TCP
   DependsOn: 
     - VpcLinkNetLbTgtGroup80
     - VpcLinkNetLb

 VpcLinkNetLbListener443:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref "VpcLinkNetLbTgtGroup443"
     LoadBalancerArn: !Ref "VpcLinkNetLb"
     Port: 443
     Protocol: TCP
   DependsOn: 
     - VpcLinkNetLbTgtGroup443
     - VpcLinkNetLb

 VpcLinkApiGw:
   Type: AWS::ApiGateway::VpcLink
   Properties:
     Description: VPC link for Rest Api
     Name: test_env-vpclink-restapi
     TargetArns:
       - !Ref "VpcLinkNetLb"
   DependsOn:
     - VpcLinkNetLb
     - VpcLinkNetLbListener80
     - VpcLinkNetLbListener443


Outputs:

 LbIpAddress1:
   Value: !GetAtt "CustomLbIps.ipAddress1"
 
 LbIpAddress2:
   Value: !GetAtt "CustomLbIps.ipAddress2"

 VpcLinkApiGw:
   Value: !Ref "VpcLinkApiGw"
   Export:
     Name: !Sub "${AWS::StackName}-VPCLINKAPIGW"
 
 VpcLinkNetLb:
   Value: !GetAtt "VpcLinkNetLb.DNSName"
   Export:
     Name: !Sub "${AWS::StackName}-VPCLINKNETLBDNSNAME"
